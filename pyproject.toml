[build-system]
requires = ["setuptools>=61.0", "wheel", "pybind11>=2.11.0", "cython>=3.0.0"]
build-backend = "setuptools.build_meta"

[project]
name = "erp-integration-platform"
version = "1.0.0"
description = "Hybrid Python-to-C++ ERP Integration Platform"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "Proprietary"}
authors = [
    {name = "ERP Integration Team", email = "team@example.com"}
]
dependencies = [
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    "polars>=0.20.0",
    "redis>=5.0",
    "celery>=5.3",
    "flower>=2.0.1",
    "httpx>=0.25.0",
    "pydantic>=2.0",
    "pydantic-settings>=2.0",
    "python-multipart>=0.0.6",
    "msgpack>=1.0.5",
    "pyzmq>=25.1.0",
    "aiofiles>=23.2.1",
    "python-dotenv>=1.0.0",
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.1",
    "mypy>=1.7.0",
    "ruff>=0.1.5",
    "black>=23.10.0",
    "pre-commit>=3.5.0",
    "ipython>=8.17.0",
    "py-spy>=0.3.14",
    "memory-profiler>=0.61.0"
]
database = [
    "oracledb>=1.4.0",  # Oracle connector
    "pyodbc>=4.0.39",   # SQL Server connector
    "psycopg2-binary>=2.9.0",  # PostgreSQL connector
    "pymysql>=1.1.0"    # MySQL connector
]
monitoring = [
    "opentelemetry-api>=1.20.0,<1.21.0",
    "opentelemetry-sdk>=1.20.0,<1.21.0",
    "opentelemetry-exporter-prometheus>=0.41b0,<0.42b0"
]
cpp = [
    "pybind11>=2.11.0",
    "nanobind>=1.8.0",
    "cmake>=3.27.0"
]
cython = [
    "cython>=3.0.0",
    "numpy>=1.24.0"
]
sap = [
    "pyrfc>=3.0",  # Requires SAP NetWeaver RFC SDK
]
sap-rest = [
    "requests>=2.31.0",
    "requests-oauthlib>=1.3.1",
    "xmltodict>=0.13.0"  # For SAP OData XML responses
]

[project.scripts]
erp-platform = "erp_platform.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
erp_platform = ["py.typed"]

[tool.ruff]
line-length = 120
target-version = "py38"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = ["E203", "E266", "E501", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".eggs",
    "*.egg",
]

[tool.mypy]
python_version = "3.8"
disallow_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
warn_redundant_casts = true
strict_optional = true
ignore_missing_imports = true
pretty = true
show_error_codes = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=erp_platform",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--asyncio-mode=auto"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

[tool.coverage.run]
source = ["src/erp_platform"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/.venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:"
]

[tool.black]
line-length = 120
target-version = ['py38']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/'''