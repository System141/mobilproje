version: '3.8'

# Build arguments and environment variables
x-common-variables: &common-variables
  ENVIRONMENT: development
  DEBUG: "true"
  REDIS_URL: redis://redis:6379/0
  CELERY_BROKER_URL: redis://redis:6379/0
  CELERY_RESULT_BACKEND: redis://redis:6379/1
  ERP_PLATFORM_SAP_RFC_ENABLED: "false"
  SAP_CONNECTION_MODE: rest

services:
  # Main application - Base variant (default)
  app:
    build:
      context: .
      target: base
      args:
        BUILD_VARIANT: base
        INCLUDE_SAP_RFC: "false"
        INCLUDE_SAP_REST: "true"
    container_name: erp-platform
    ports:
      - "8000:8000"
    environment:
      <<: *common-variables
    volumes:
      - ./src:/app/src
      - ./data:/app/data
    depends_on:
      - redis
      - postgres
    networks:
      - erp-network
    restart: unless-stopped

  # Redis for caching and Celery
  redis:
    image: redis:7-alpine
    container_name: erp-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - erp-network
    restart: unless-stopped

  # PostgreSQL for metadata storage
  postgres:
    image: postgres:15-alpine
    container_name: erp-postgres
    environment:
      - POSTGRES_DB=erp_integration
      - POSTGRES_USER=erpuser
      - POSTGRES_PASSWORD=erppass
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - erp-network
    restart: unless-stopped

  # SAP REST variant - For SAP connectivity via REST/OData APIs
  app-sap-rest:
    build:
      context: .
      target: sap-rest
      args:
        BUILD_VARIANT: sap-rest
        INCLUDE_SAP_RFC: "false"
        INCLUDE_SAP_REST: "true"
    container_name: erp-platform-sap-rest
    ports:
      - "8001:8000"
    environment:
      <<: *common-variables
      ERP_PLATFORM_BUILD_VARIANT: sap-rest
    volumes:
      - ./src:/app/src
      - ./data:/app/data
    depends_on:
      - redis
      - postgres
    networks:
      - erp-network
    restart: unless-stopped
    profiles:
      - sap-rest

  # SAP RFC variant - For full SAP RFC support (requires SAP SDK mounted)
  app-sap-rfc:
    build:
      context: .
      target: sap-rfc
      args:
        BUILD_VARIANT: sap-rfc
        INCLUDE_SAP_RFC: "true"
        INCLUDE_SAP_REST: "true"
    container_name: erp-platform-sap-rfc
    ports:
      - "8002:8000"
    environment:
      <<: *common-variables
      ERP_PLATFORM_BUILD_VARIANT: sap-rfc
      ERP_PLATFORM_SAP_RFC_ENABLED: "true"
      SAPNWRFC_HOME: /opt/nwrfcsdk
      LD_LIBRARY_PATH: /opt/nwrfcsdk/lib
    volumes:
      - ./src:/app/src
      - ./data:/app/data
      # Mount SAP NetWeaver RFC SDK (uncomment and adjust path)
      # - /path/to/nwrfcsdk:/opt/nwrfcsdk:ro
    depends_on:
      - redis
      - postgres
    networks:
      - erp-network
    restart: unless-stopped
    profiles:
      - sap-rfc

  # Celery worker
  celery-worker:
    build:
      context: .
      target: base
    container_name: erp-celery-worker
    command: sh -c "cd /app && python -m celery -A erp_platform.tasks.celery_app worker --loglevel=info"
    environment:
      <<: *common-variables
      PYTHONPATH: /app/src
    volumes:
      - ./src:/app/src
    depends_on:
      - redis
      - app
    networks:
      - erp-network
    restart: unless-stopped

  # Celery beat (scheduler)
  celery-beat:
    build:
      context: .
      target: base
    container_name: erp-celery-beat
    command: sh -c "cd /app && python -m celery -A erp_platform.tasks.celery_app beat --loglevel=info"
    environment:
      <<: *common-variables
      PYTHONPATH: /app/src
    volumes:
      - ./src:/app/src
    depends_on:
      - redis
      - app
    networks:
      - erp-network
    restart: unless-stopped

  # Flower (Celery monitoring)
  flower:
    build:
      context: .
      target: base
    container_name: erp-flower
    command: sh -c "cd /app && python -m celery -A erp_platform.tasks.celery_app flower --port=5555"
    ports:
      - "5555:5555"
    environment:
      <<: *common-variables
      PYTHONPATH: /app/src
    depends_on:
      - redis
      - celery-worker
    networks:
      - erp-network
    restart: unless-stopped

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: erp-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - erp-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: erp-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana-dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
    networks:
      - erp-network
    restart: unless-stopped

networks:
  erp-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data: