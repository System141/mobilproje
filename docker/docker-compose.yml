# Turkish Business Integration Platform - Docker Compose
version: '3.9'

x-common-environment: &common-environment
  ENVIRONMENT: development
  DEBUG: "true"
  DATABASE_URL: postgresql+asyncpg://turkuser:turkpass@postgres/turkplatform
  REDIS_URL: redis://redis:6379/0
  KAFKA_BOOTSTRAP_SERVERS: kafka:9092

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: turkplatform-postgres
    environment:
      POSTGRES_DB: turkplatform
      POSTGRES_USER: turkuser
      POSTGRES_PASSWORD: turkpass
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=tr_TR.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U turkuser -d turkplatform"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: turkplatform-redis
    command: redis-server --appendonly yes --requirepass turkpass
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # Zookeeper (for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: turkplatform-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    restart: unless-stopped

  # Apache Kafka
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: turkplatform-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Main API Application
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    container_name: turkplatform-api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      <<: *common-environment
    ports:
      - "8000:8000"
    volumes:
      - ../src:/app/src:ro
      - ../alembic:/app/alembic:ro
      - api_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Background Worker
  worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile.worker
    container_name: turkplatform-worker
    depends_on:
      - postgres
      - redis
      - kafka
    environment:
      <<: *common-environment
    volumes:
      - ../src:/app/src:ro
      - worker_logs:/app/logs
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: turkplatform-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: turkplatform-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=turkpass
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana-dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    restart: unless-stopped

volumes:
  postgres_data:
    name: turkplatform_postgres_data
  redis_data:
    name: turkplatform_redis_data
  zookeeper_data:
    name: turkplatform_zookeeper_data
  zookeeper_logs:
    name: turkplatform_zookeeper_logs
  kafka_data:
    name: turkplatform_kafka_data
  prometheus_data:
    name: turkplatform_prometheus_data
  grafana_data:
    name: turkplatform_grafana_data
  api_logs:
    name: turkplatform_api_logs
  worker_logs:
    name: turkplatform_worker_logs

networks:
  default:
    name: turkplatform_network
    driver: bridge